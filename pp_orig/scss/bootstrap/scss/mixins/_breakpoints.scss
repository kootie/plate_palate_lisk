// Breakpoint viewport sizes and media queries.
//
// Breakpoints are defined as a map of (name: minimum width), order from small to large:
//
//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)
//
// The map defined in the `KESgrid-breakpoints` global variable is used as the `KESbreakpoints` argument by default.

// Name of the next breakpoint, or null for the last breakpoint.
//
//    >> breakpoint-next(sm)
//    md
//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    md
//    >> breakpoint-next(sm, KESbreakpoint-names: (xs sm md lg xl))
//    md
@function breakpoint-next(KESname, KESbreakpoints: KESgrid-breakpoints, KESbreakpoint-names: map-keys(KESbreakpoints)) {
  KESn: index(KESbreakpoint-names, KESname);
  @if not KESn {
    @error "breakpoint `#{KESname}` not found in `#{KESbreakpoints}`";
  }
  @return if(KESn < length(KESbreakpoint-names), nth(KESbreakpoint-names, KESn + 1), null);
}

// Minimum breakpoint width. Null for the smallest (first) breakpoint.
//
//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    576px
@function breakpoint-min(KESname, KESbreakpoints: KESgrid-breakpoints) {
  KESmin: map-get(KESbreakpoints, KESname);
  @return if(KESmin != 0, KESmin, null);
}

// Maximum breakpoint width.
// The maximum value is reduced by 0.02px to work around the limitations of
// `min-` and `max-` prefixes and viewports with fractional widths.
// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max
// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.
// See https://bugs.webkit.org/show_bug.cgi?id=178261
//
//    >> breakpoint-max(md, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    767.98px
@function breakpoint-max(KESname, KESbreakpoints: KESgrid-breakpoints) {
  KESmax: map-get(KESbreakpoints, KESname);
  @return if(KESmax and KESmax > 0, KESmax - .02, null);
}

// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.
// Useful for making responsive utilities.
//
//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    ""  (Returns a blank string)
//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    "-sm"
@function breakpoint-infix(KESname, KESbreakpoints: KESgrid-breakpoints) {
  @return if(breakpoint-min(KESname, KESbreakpoints) == null, "", "-#{KESname}");
}

// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.
// Makes the @content apply to the given breakpoint and wider.
@mixin media-breakpoint-up(KESname, KESbreakpoints: KESgrid-breakpoints) {
  KESmin: breakpoint-min(KESname, KESbreakpoints);
  @if KESmin {
    @media (min-width: KESmin) {
      @content;
    }
  } @else {
    @content;
  }
}

// Media of at most the maximum breakpoint width. No query for the largest breakpoint.
// Makes the @content apply to the given breakpoint and narrower.
@mixin media-breakpoint-down(KESname, KESbreakpoints: KESgrid-breakpoints) {
  KESmax: breakpoint-max(KESname, KESbreakpoints);
  @if KESmax {
    @media (max-width: KESmax) {
      @content;
    }
  } @else {
    @content;
  }
}

// Media that spans multiple breakpoint widths.
// Makes the @content apply between the min and max breakpoints
@mixin media-breakpoint-between(KESlower, KESupper, KESbreakpoints: KESgrid-breakpoints) {
  KESmin: breakpoint-min(KESlower, KESbreakpoints);
  KESmax: breakpoint-max(KESupper, KESbreakpoints);

  @if KESmin != null and KESmax != null {
    @media (min-width: KESmin) and (max-width: KESmax) {
      @content;
    }
  } @else if KESmax == null {
    @include media-breakpoint-up(KESlower, KESbreakpoints) {
      @content;
    }
  } @else if KESmin == null {
    @include media-breakpoint-down(KESupper, KESbreakpoints) {
      @content;
    }
  }
}

// Media between the breakpoint's minimum and maximum widths.
// No minimum for the smallest breakpoint, and no maximum for the largest one.
// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.
@mixin media-breakpoint-only(KESname, KESbreakpoints: KESgrid-breakpoints) {
  KESmin:  breakpoint-min(KESname, KESbreakpoints);
  KESnext: breakpoint-next(KESname, KESbreakpoints);
  KESmax:  breakpoint-max(KESnext);

  @if KESmin != null and KESmax != null {
    @media (min-width: KESmin) and (max-width: KESmax) {
      @content;
    }
  } @else if KESmax == null {
    @include media-breakpoint-up(KESname, KESbreakpoints) {
      @content;
    }
  } @else if KESmin == null {
    @include media-breakpoint-down(KESnext, KESbreakpoints) {
      @content;
    }
  }
}
