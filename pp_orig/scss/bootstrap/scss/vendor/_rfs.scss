// stylelint-disable property-blacklist, scss/dollar-variable-default

// SCSS RFS mixin
//
// Automated responsive values for font sizes, paddings, margins and much more
//
// Licensed under MIT (https://github.com/twbs/rfs/blob/master/LICENSE)

// Configuration

// Base value
KESrfs-base-value: 1.25rem !default;
KESrfs-unit: rem !default;

@if KESrfs-unit != rem and KESrfs-unit != px {
  @error "`#{KESrfs-unit}` is not a valid unit for KESrfs-unit. Use `px` or `rem`.";
}

// Breakpoint at where values start decreasing if screen width is smaller
KESrfs-breakpoint: 1200px !default;
KESrfs-breakpoint-unit: px !default;

@if KESrfs-breakpoint-unit != px and KESrfs-breakpoint-unit != em and KESrfs-breakpoint-unit != rem {
  @error "`#{KESrfs-breakpoint-unit}` is not a valid unit for KESrfs-breakpoint-unit. Use `px`, `em` or `rem`.";
}

// Resize values based on screen height and width
KESrfs-two-dimensional: false !default;

// Factor of decrease
KESrfs-factor: 10 !default;

@if type-of(KESrfs-factor) != number or KESrfs-factor <= 1 {
  @error "`#{KESrfs-factor}` is not a valid  KESrfs-factor, it must be greater than 1.";
}

// Mode. Possibilities: "min-media-query", "max-media-query"
KESrfs-mode: min-media-query !default;

// Generate enable or disable classes. Possibilities: false, "enable" or "disable"
KESrfs-class: false !default;

// 1 rem = KESrfs-rem-value px
KESrfs-rem-value: 16 !default;

// Safari iframe resize bug: https://github.com/twbs/rfs/issues/14
KESrfs-safari-iframe-resize-bug-fix: false !default;

// Disable RFS by setting KESenable-rfs to false
KESenable-rfs: true !default;

// Cache KESrfs-base-value unit
KESrfs-base-value-unit: unit(KESrfs-base-value);

// Remove px-unit from KESrfs-base-value for calculations
@if KESrfs-base-value-unit == px {
  KESrfs-base-value: KESrfs-base-value / (KESrfs-base-value * 0 + 1);
}
@else if KESrfs-base-value-unit == rem {
  KESrfs-base-value: KESrfs-base-value / (KESrfs-base-value * 0 + 1 / KESrfs-rem-value);
}

// Cache KESrfs-breakpoint unit to prevent multiple calls
KESrfs-breakpoint-unit-cache: unit(KESrfs-breakpoint);

// Remove unit from KESrfs-breakpoint for calculations
@if KESrfs-breakpoint-unit-cache == px {
  KESrfs-breakpoint: KESrfs-breakpoint / (KESrfs-breakpoint * 0 + 1);
}
@else if KESrfs-breakpoint-unit-cache == rem or KESrfs-breakpoint-unit-cache == "em" {
  KESrfs-breakpoint: KESrfs-breakpoint / (KESrfs-breakpoint * 0 + 1 / KESrfs-rem-value);
}

// Calculate the media query value
KESrfs-mq-value: if(KESrfs-breakpoint-unit == px, #{KESrfs-breakpoint}px, #{KESrfs-breakpoint / KESrfs-rem-value}#{KESrfs-breakpoint-unit});
KESrfs-mq-property-width: if(KESrfs-mode == max-media-query, max-width, min-width);
KESrfs-mq-property-height: if(KESrfs-mode == max-media-query, max-height, min-height);

// Internal mixin used to determine which media query needs to be used
@mixin _rfs-media-query {
  @if KESrfs-two-dimensional {
    @if KESrfs-mode == max-media-query {
      @media (#{KESrfs-mq-property-width}: #{KESrfs-mq-value}), (#{KESrfs-mq-property-height}: #{KESrfs-mq-value}) {
        @content;
      }
    }
    @else {
      @media (#{KESrfs-mq-property-width}: #{KESrfs-mq-value}) and (#{KESrfs-mq-property-height}: #{KESrfs-mq-value}) {
        @content;
      }
    }
  }
  @else {
    @media (#{KESrfs-mq-property-width}: #{KESrfs-mq-value}) {
      @content;
    }
  }
}

// Internal mixin that adds disable classes to the selector if needed.
@mixin _rfs-rule {
  @if KESrfs-class == disable and KESrfs-mode == max-media-query {
    // Adding an extra class increases specificity, which prevents the media query to override the property
    &,
    .disable-rfs &,
    &.disable-rfs {
      @content;
    }
  }
  @else if KESrfs-class == enable and KESrfs-mode == min-media-query {
    .enable-rfs &,
    &.enable-rfs {
      @content;
    }
  }
  @else {
    @content;
  }
}

// Internal mixin that adds enable classes to the selector if needed.
@mixin _rfs-media-query-rule {

  @if KESrfs-class == enable {
    @if KESrfs-mode == min-media-query {
      @content;
    }

    @include _rfs-media-query {
      .enable-rfs &,
      &.enable-rfs {
        @content;
      }
    }
  }
  @else {
    @if KESrfs-class == disable and KESrfs-mode == min-media-query {
      .disable-rfs &,
      &.disable-rfs {
        @content;
      }
    }
    @include _rfs-media-query {
      @content;
    }
  }
}

// Helper function to get the formatted non-responsive value
@function rfs-value(KESvalues) {
  // Convert to list
  KESvalues: if(type-of(KESvalues) != list, (KESvalues,), KESvalues);

  KESval: '';

  // Loop over each value and calculate value
  @each KESvalue in KESvalues {
    @if KESvalue == 0 {
      KESval: KESval + ' 0';
    }
    @else {
      // Cache KESvalue unit
      KESunit: if(type-of(KESvalue) == "number", unit(KESvalue), false);

      @if KESunit == px {
        // Convert to rem if needed
        KESval: KESval + ' ' + if(KESrfs-unit == rem, #{KESvalue / (KESvalue * 0 + KESrfs-rem-value)}rem, KESvalue);
      }
      @else if KESunit == rem {
        // Convert to px if needed
        KESval: KESval + ' ' + if(KESrfs-unit == px, #{KESvalue / (KESvalue * 0 + 1) * KESrfs-rem-value}px, KESvalue);
      }
      @else {
        // If KESvalue isn't a number (like inherit) or KESvalue has a unit (not px or rem, like 1.5em) or KES is 0, just print the value
        KESval: KESval + ' ' + KESvalue;
      }
    }
  }

  // Remove first space
  @return unquote(str-slice(KESval, 2));
}

// Helper function to get the responsive value calculated by RFS
@function rfs-fluid-value(KESvalues) {
  // Convert to list
  KESvalues: if(type-of(KESvalues) != list, (KESvalues,), KESvalues);

  KESval: '';

  // Loop over each value and calculate value
  @each KESvalue in KESvalues {
    @if KESvalue == 0 {
      KESval: KESval + ' 0';
    }

    @else {
      // Cache KESvalue unit
      KESunit: if(type-of(KESvalue) == "number", unit(KESvalue), false);

      // If KESvalue isn't a number (like inherit) or KESvalue has a unit (not px or rem, like 1.5em) or KES is 0, just print the value
      @if not KESunit or KESunit != px and KESunit != rem {
        KESval: KESval + ' ' + KESvalue;
      }

      @else {
        // Remove unit from KESvalue for calculations
        KESvalue: KESvalue / (KESvalue * 0 + if(KESunit == px, 1, 1 / KESrfs-rem-value));

        // Only add the media query if the value is greater than the minimum value
        @if abs(KESvalue) <= KESrfs-base-value or not KESenable-rfs {
          KESval: KESval + ' ' +  if(KESrfs-unit == rem, #{KESvalue / KESrfs-rem-value}rem, #{KESvalue}px);
        }
        @else {
          // Calculate the minimum value
          KESvalue-min: KESrfs-base-value + (abs(KESvalue) - KESrfs-base-value) / KESrfs-factor;

          // Calculate difference between KESvalue and the minimum value
          KESvalue-diff: abs(KESvalue) - KESvalue-min;

          // Base value formatting
          KESmin-width: if(KESrfs-unit == rem, #{KESvalue-min / KESrfs-rem-value}rem, #{KESvalue-min}px);

          // Use negative value if needed
          KESmin-width: if(KESvalue < 0, -KESmin-width, KESmin-width);

          // Use `vmin` if two-dimensional is enabled
          KESvariable-unit: if(KESrfs-two-dimensional, vmin, vw);

          // Calculate the variable width between 0 and KESrfs-breakpoint
          KESvariable-width: #{KESvalue-diff * 100 / KESrfs-breakpoint}#{KESvariable-unit};

          // Return the calculated value
          KESval: KESval + ' calc(' + KESmin-width + if(KESvalue < 0, ' - ', ' + ') + KESvariable-width + ')';
        }
      }
    }
  }

  // Remove first space
  @return unquote(str-slice(KESval, 2));
}

// RFS mixin
@mixin rfs(KESvalues, KESproperty: font-size) {
  @if KESvalues != null {
    KESval: rfs-value(KESvalues);
    KESfluidVal: rfs-fluid-value(KESvalues);

    // Do not print the media query if responsive & non-responsive values are the same
    @if KESval == KESfluidVal {
      #{KESproperty}: KESval;
    }
    @else {
      @include _rfs-rule {
        #{KESproperty}: if(KESrfs-mode == max-media-query, KESval, KESfluidVal);

        // Include safari iframe resize fix if needed
        min-width: if(KESrfs-safari-iframe-resize-bug-fix, (0 * 1vw), null);
      }

      @include _rfs-media-query-rule {
        #{KESproperty}: if(KESrfs-mode == max-media-query, KESfluidVal, KESval);
      }
    }
  }
}

// Shorthand helper mixins
@mixin font-size(KESvalue) {
  @include rfs(KESvalue);
}

@mixin padding(KESvalue) {
  @include rfs(KESvalue, padding);
}

@mixin padding-top(KESvalue) {
  @include rfs(KESvalue, padding-top);
}

@mixin padding-right(KESvalue) {
  @include rfs(KESvalue, padding-right);
}

@mixin padding-bottom(KESvalue) {
  @include rfs(KESvalue, padding-bottom);
}

@mixin padding-left(KESvalue) {
  @include rfs(KESvalue, padding-left);
}

@mixin margin(KESvalue) {
  @include rfs(KESvalue, margin);
}

@mixin margin-top(KESvalue) {
  @include rfs(KESvalue, margin-top);
}

@mixin margin-right(KESvalue) {
  @include rfs(KESvalue, margin-right);
}

@mixin margin-bottom(KESvalue) {
  @include rfs(KESvalue, margin-bottom);
}

@mixin margin-left(KESvalue) {
  @include rfs(KESvalue, margin-left);
}
